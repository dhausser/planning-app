{"ast":null,"code":"import { ApolloClient, ApolloLink, HttpLink, InMemoryCache } from '@apollo/client';\nimport { onError } from '@apollo/link-error';\nimport fetch from 'isomorphic-unfetch';\nimport { resolvers, typeDefs } from './schema';\nexport const port = false ? 8080 : 4000;\nexport const isBrowser = typeof localStorage !== 'undefined'; // let data;\n\nlet token;\n\nif (isBrowser) {\n  token = localStorage.getItem('token'); // const data = {\n  //   isAuthenticated: !!token,\n  //   projectId: localStorage.getItem(\"projectId\"),\n  //   versionId: localStorage.getItem(\"versionId\"),\n  //   statusId: localStorage.getItem(\"statusId\"),\n  //   teamId: localStorage.getItem(\"teamId\"),\n  // }\n  // cache.writeData({ data })\n}\n\nexport default ((initialState, ctx) => new ApolloClient({\n  ssrMode: Boolean(ctx),\n  link: ApolloLink.from([onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    if (graphQLErrors) {\n      graphQLErrors.forEach(({\n        message,\n        locations,\n        path\n      }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n    }\n\n    if (networkError) {\n      console.log(`[Network error]: ${networkError}. Backend is unreachable. Is it running?`);\n    }\n  }), new HttpLink({\n    uri: `http://localhost:${port}/graphql`,\n    credentials: 'include',\n    headers: {\n      authorization: token || null\n    },\n    fetch\n  })]),\n  cache: new InMemoryCache({}).restore(initialState || {}),\n  resolvers,\n  typeDefs\n}));","map":{"version":3,"sources":["/home/davy/planning-app/client/src/apolloClient.js"],"names":["ApolloClient","ApolloLink","HttpLink","InMemoryCache","onError","fetch","resolvers","typeDefs","port","isBrowser","localStorage","token","getItem","initialState","ctx","ssrMode","Boolean","link","from","graphQLErrors","networkError","forEach","message","locations","path","console","log","uri","credentials","headers","authorization","cache","restore"],"mappings":"AAAA,SACEA,YADF,EACgBC,UADhB,EAC4BC,QAD5B,EACsCC,aADtC,QAEO,gBAFP;AAGA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,UAApC;AAEA,OAAO,MAAMC,IAAI,GAAG,QAAwC,IAAxC,GAA+C,IAA5D;AACP,OAAO,MAAMC,SAAS,GAAG,OAAOC,YAAP,KAAwB,WAA1C,C,CAEP;;AACA,IAAIC,KAAJ;;AAEA,IAAIF,SAAJ,EAAe;AACbE,EAAAA,KAAK,GAAGD,YAAY,CAACE,OAAb,CAAqB,OAArB,CAAR,CADa,CAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,gBAAe,CAACC,YAAD,EAAeC,GAAf,KAAuB,IAAId,YAAJ,CAAiB;AACrDe,EAAAA,OAAO,EAAEC,OAAO,CAACF,GAAD,CADqC;AAErDG,EAAAA,IAAI,EAAEhB,UAAU,CAACiB,IAAX,CAAgB,CACpBd,OAAO,CAAC,CAAC;AAAEe,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAD,KAAqC;AAC3C,QAAID,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAACE,OAAd,CAAsB,CAAC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA;AAAtB,OAAD,KAAkCC,OAAO,CAACC,GAAR,CACrD,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EADtB,CAAxD;AAGD;;AACD,QAAIJ,YAAJ,EAAkB;AAChBK,MAAAA,OAAO,CAACC,GAAR,CACG,oBAAmBN,YAAa,0CADnC;AAGD;AACF,GAXM,CADa,EAapB,IAAIlB,QAAJ,CAAa;AACXyB,IAAAA,GAAG,EAAG,oBAAmBnB,IAAK,UADnB;AAEXoB,IAAAA,WAAW,EAAE,SAFF;AAGXC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAEnB,KAAK,IAAI;AADjB,KAHE;AAMXN,IAAAA;AANW,GAAb,CAboB,CAAhB,CAF+C;AAwBrD0B,EAAAA,KAAK,EAAE,IAAI5B,aAAJ,CAAkB,EAAlB,EAAsB6B,OAAtB,CAA8BnB,YAAY,IAAI,EAA9C,CAxB8C;AAyBrDP,EAAAA,SAzBqD;AA0BrDC,EAAAA;AA1BqD,CAAjB,CAAtC","sourcesContent":["import {\n  ApolloClient, ApolloLink, HttpLink, InMemoryCache,\n} from '@apollo/client'\nimport { onError } from '@apollo/link-error'\nimport fetch from 'isomorphic-unfetch'\nimport { resolvers, typeDefs } from './schema'\n\nexport const port = process.env.NODE_ENV === 'production' ? 8080 : 4000\nexport const isBrowser = typeof localStorage !== 'undefined'\n\n// let data;\nlet token\n\nif (isBrowser) {\n  token = localStorage.getItem('token')\n  // const data = {\n  //   isAuthenticated: !!token,\n  //   projectId: localStorage.getItem(\"projectId\"),\n  //   versionId: localStorage.getItem(\"versionId\"),\n  //   statusId: localStorage.getItem(\"statusId\"),\n  //   teamId: localStorage.getItem(\"teamId\"),\n  // }\n  // cache.writeData({ data })\n}\n\nexport default (initialState, ctx) => new ApolloClient({\n  ssrMode: Boolean(ctx),\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors) {\n        graphQLErrors.forEach(({ message, locations, path }) => console.log(\n          `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n        ))\n      }\n      if (networkError) {\n        console.log(\n          `[Network error]: ${networkError}. Backend is unreachable. Is it running?`,\n        )\n      }\n    }),\n    new HttpLink({\n      uri: `http://localhost:${port}/graphql`,\n      credentials: 'include',\n      headers: {\n        authorization: token || null,\n      },\n      fetch,\n    }),\n  ]),\n  cache: new InMemoryCache({}).restore(initialState || {}),\n  resolvers,\n  typeDefs,\n})\n"]},"metadata":{},"sourceType":"module"}