{"ast":null,"code":"var _jsxFileName = \"/home/davy/planning-app/client/src/components/Issue/IssueTable.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport DynamicTable from '@atlaskit/dynamic-table';\nimport Tooltip from '@atlaskit/tooltip';\nimport EmptyState from '@atlaskit/empty-state';\nimport Lozenge from '@atlaskit/lozenge';\nimport { Status } from '@atlaskit/status';\nimport { statusCatecoryColorMap, priorityIconMap, issuetypeIconMap } from './Icon';\nconst head = {\n  cells: [{\n    key: 'key',\n    content: 'Key',\n    isSortable: true,\n    width: 7\n  }, {\n    key: 'summary',\n    content: 'Summary',\n    shouldTruncate: true,\n    isSortable: true\n  }, {\n    key: 'type',\n    content: 'T',\n    isSortable: true,\n    width: 5\n  }, {\n    key: 'status',\n    content: 'Status',\n    isSortable: true,\n    width: 10\n  }, {\n    key: 'assignee',\n    content: 'Assignee',\n    isSortable: true,\n    width: 10\n  }, {\n    key: 'priority',\n    content: 'P',\n    isSortable: true,\n    width: 4\n  }, {\n    key: 'version',\n    content: 'V',\n    isSortable: true,\n    width: 6\n  }]\n};\n\nconst row = ({\n  key,\n  fields: {\n    summary,\n    issuetype,\n    status,\n    priority,\n    fixVersions,\n    assignee\n  }\n}) => ({\n  key,\n  cells: [{\n    key,\n    content: __jsx(Link, {\n      to: `/issue/${key}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, key)\n  }, {\n    key: summary,\n    content: summary\n  }, {\n    key: issuetype.id,\n    content: issuetypeIconMap[issuetype.id]\n  }, {\n    key: status.category,\n    content: __jsx(Status, {\n      text: status.name,\n      color: statusCatecoryColorMap[status.statusCategory.id],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })\n  }, {\n    key: assignee && assignee.key,\n    content: __jsx(Link, {\n      to: `/resource/${assignee && assignee.key}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, assignee && assignee.displayName)\n  }, {\n    key: priority,\n    content: priorityIconMap[priority.id]\n  }, {\n    key: fixVersions[0] ? fixVersions[0].id : null,\n    content: fixVersions[0] ? __jsx(Tooltip, {\n      content: fixVersions[0].name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, __jsx(Lozenge, {\n      appearance: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, fixVersions[0].name)) : ''\n  }]\n});\n\nconst IssueTable = ({\n  loading,\n  error,\n  issues,\n  rowsPerPage,\n  startAt\n}) => __jsx(DynamicTable // caption={issues && `${issues.total < startAt ? issues.total : startAt} of ${issues.total}`}\n, {\n  head: head,\n  rows: issues && issues.issues && issues.issues.map(row),\n  rowsPerPage: rowsPerPage,\n  loadingSpinnerSize: \"large\",\n  isLoading: loading,\n  isFixedSize: true,\n  defaultSortKey: \"priority\",\n  defaultSortOrder: \"ASC\",\n  isRankable: true,\n  emptyView: error && __jsx(EmptyState, {\n    description: error.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 119\n  },\n  __self: this\n});\n\nIssueTable.defaultProps = {\n  issues: {},\n  loading: false,\n  error: null\n};\nIssueTable.propTypes = {\n  loading: PropTypes.bool,\n  rowsPerPage: PropTypes.number.isRequired,\n  startAt: PropTypes.number.isRequired,\n  error: PropTypes.objectOf(PropTypes.objectOf),\n  issues: PropTypes.objectOf(PropTypes.objectOf)\n};\nexport default IssueTable;","map":{"version":3,"sources":["/home/davy/planning-app/client/src/components/Issue/IssueTable.js"],"names":["React","PropTypes","Link","DynamicTable","Tooltip","EmptyState","Lozenge","Status","statusCatecoryColorMap","priorityIconMap","issuetypeIconMap","head","cells","key","content","isSortable","width","shouldTruncate","row","fields","summary","issuetype","status","priority","fixVersions","assignee","id","category","name","statusCategory","displayName","IssueTable","loading","error","issues","rowsPerPage","startAt","map","message","defaultProps","propTypes","bool","number","isRequired","objectOf"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport DynamicTable from '@atlaskit/dynamic-table'\nimport Tooltip from '@atlaskit/tooltip'\nimport EmptyState from '@atlaskit/empty-state'\nimport Lozenge from '@atlaskit/lozenge'\nimport { Status } from '@atlaskit/status'\n\nimport {\n  statusCatecoryColorMap,\n  priorityIconMap,\n  issuetypeIconMap,\n} from './Icon'\n\nconst head = {\n  cells: [\n    {\n      key: 'key',\n      content: 'Key',\n      isSortable: true,\n      width: 7,\n    },\n    {\n      key: 'summary',\n      content: 'Summary',\n      shouldTruncate: true,\n      isSortable: true,\n    },\n    {\n      key: 'type',\n      content: 'T',\n      isSortable: true,\n      width: 5,\n    },\n    {\n      key: 'status',\n      content: 'Status',\n      isSortable: true,\n      width: 10,\n    },\n    {\n      key: 'assignee',\n      content: 'Assignee',\n      isSortable: true,\n      width: 10,\n    },\n    {\n      key: 'priority',\n      content: 'P',\n      isSortable: true,\n      width: 4,\n    },\n    {\n      key: 'version',\n      content: 'V',\n      isSortable: true,\n      width: 6,\n    },\n  ],\n}\nconst row = ({\n  key,\n  fields: {\n    summary, issuetype, status, priority, fixVersions, assignee,\n  },\n}) => ({\n  key,\n  cells: [\n    {\n      key,\n      content: <Link to={`/issue/${key}`}>{key}</Link>,\n    },\n    {\n      key: summary,\n      content: summary,\n    },\n    {\n      key: issuetype.id,\n      content: issuetypeIconMap[issuetype.id],\n    },\n    {\n      key: status.category,\n      content: (\n        <Status\n          text={status.name}\n          color={statusCatecoryColorMap[status.statusCategory.id]}\n        />\n      ),\n    },\n    {\n      key: assignee && assignee.key,\n      content: (\n        <Link to={`/resource/${assignee && assignee.key}`}>\n          {assignee && assignee.displayName}\n        </Link>\n      ),\n    },\n    {\n      key: priority,\n      content: priorityIconMap[priority.id],\n    },\n    {\n      key: fixVersions[0] ? fixVersions[0].id : null,\n      content: fixVersions[0] ? (\n        <Tooltip content={fixVersions[0].name}>\n          <Lozenge appearance=\"default\">{fixVersions[0].name}</Lozenge>\n        </Tooltip>\n      ) : (\n        ''\n      ),\n    },\n  ],\n})\n\nconst IssueTable = ({\n  loading, error, issues, rowsPerPage, startAt,\n}) => (\n  <DynamicTable\n    // caption={issues && `${issues.total < startAt ? issues.total : startAt} of ${issues.total}`}\n    head={head}\n    rows={issues && issues.issues && issues.issues.map(row)}\n    rowsPerPage={rowsPerPage}\n    loadingSpinnerSize=\"large\"\n    isLoading={loading}\n    isFixedSize\n    defaultSortKey=\"priority\"\n    defaultSortOrder=\"ASC\"\n    isRankable\n    emptyView={error && <EmptyState description={error.message} />}\n  />\n)\n\nIssueTable.defaultProps = {\n  issues: {},\n  loading: false,\n  error: null,\n}\n\nIssueTable.propTypes = {\n  loading: PropTypes.bool,\n  rowsPerPage: PropTypes.number.isRequired,\n  startAt: PropTypes.number.isRequired,\n  error: PropTypes.objectOf(PropTypes.objectOf),\n  issues: PropTypes.objectOf(PropTypes.objectOf),\n}\n\nexport default IssueTable\n"]},"metadata":{},"sourceType":"module"}