{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/davy/planning-app/client/src/pages/resources.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n  resources {\\n    key\\n    name\\n    team\\n  }\\n}\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery, gql } from '@apollo/client';\nconst RESOURCES = gql(_templateObject());\nexport default (() => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(RESOURCES);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Loading\");\n\n  if (error) {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Error:\", ' ', error.message);\n  }\n\n  console.log(data);\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Resources are loaded\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, data.resources.map(({\n    key,\n    name,\n    team\n  }) => __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"\".concat(key, \" - \").concat(name, \" - \").concat(team)))));\n});","map":{"version":3,"sources":["/home/davy/planning-app/client/src/pages/resources.js"],"names":["useQuery","gql","RESOURCES","loading","error","data","message","console","log","resources","map","key","name","team"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAEA,MAAMC,SAAS,GAAGD,GAAH,mBAAf;AAUA,gBAAe,MAAM;AACnB,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BL,QAAQ,CAACE,SAAD,CAAzC;AACA,MAAIC,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;;AACb,MAAIC,KAAJ,EAAW;AACT,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEG,GAFH,EAGGA,KAAK,CAACE,OAHT,CADF;AAOD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,SACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IAAI,CAACI,SAAL,CAAeC,GAAf,CAAmB,CAAC;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,IAAP;AAAaC,IAAAA;AAAb,GAAD,KAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAQF,GAAR,gBAAiBC,IAAjB,gBAA2BC,IAA3B,EAA5C,CADH,CAFF,CADF;AAQD,CArBD","sourcesContent":["import { useQuery, gql } from '@apollo/client'\n\nconst RESOURCES = gql`\n{\n  resources {\n    key\n    name\n    team\n  }\n}\n`\n\nexport default () => {\n  const { loading, error, data } = useQuery(RESOURCES)\n  if (loading) return <p>Loading</p>\n  if (error) {\n    return (\n      <p>\n        Error:\n        {' '}\n        {error.message}\n      </p>\n    )\n  }\n  console.log(data)\n  return (\n    <>\n      <p>Resources are loaded</p>\n      <ul>\n        {data.resources.map(({ key, name, team }) => <li>{`${key} - ${name} - ${team}`}</li>)}\n      </ul>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}