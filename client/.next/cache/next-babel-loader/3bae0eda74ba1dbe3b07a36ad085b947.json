{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/davy/planning-app/client/src/pages/resource.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  query getAbsences($id: ID!) {\\n    absences(id: $id) {\\n      key\\n      date\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query GetIssues(\\n    $projectId: String\\n    $versionId: String\\n    $statusId: String\\n    $resourceId: String\\n    $startAt: Int\\n    $maxResults: Int\\n  ) {\\n    projectId @client @export(as: \\\"projectId\\\")\\n    versionId @client @export(as: \\\"versionId\\\")\\n    statusId @client @export(as: \\\"statusId\\\")\\n    issues(\\n      projectId: $projectId\\n      versionId: $versionId\\n      statusId: $statusId\\n      resourceId: $resourceId\\n      startAt: $startAt\\n      maxResults: $maxResults\\n    ) {\\n      ...IssuePagination\\n      issues {\\n        ...IssueRow\\n      }\\n    }\\n  }\\n  \", \"\\n  \", \"\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport PropTypes from 'prop-types';\nimport { withNavigationViewController } from '@atlaskit/navigation-next';\nimport EmptyState from '@atlaskit/empty-state';\nimport PageHeader from '@atlaskit/page-header';\nimport TextField from '@atlaskit/textfield';\nimport { Status } from '@atlaskit/status';\nimport { projectHomeView, Loading, Layout, ProjectFilter, VersionFilter, StatusFilter, IssueTable, LoadButton, Nameplate } from '../components';\nimport { ISSUE_ROW_DATA, ISSUE_PAGINATION } from './issues';\nconst ROWS_PER_PAGE = 50;\nconst GET_ISSUES = gql(_templateObject(), ISSUE_PAGINATION, ISSUE_ROW_DATA);\nexport const GET_ABSENCES = gql(_templateObject2());\n\nconst barContent = __jsx(\"div\", {\n  style: {\n    display: 'flex'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64\n  },\n  __self: this\n}, __jsx(\"div\", {\n  style: {\n    flexBasis: 150,\n    marginRight: 8\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 65\n  },\n  __self: this\n}, __jsx(TextField, {\n  isCompact: true,\n  placeholder: \"Filter\",\n  \"aria-label\": \"Filter\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66\n  },\n  __self: this\n})), __jsx(ProjectFilter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68\n  },\n  __self: this\n}), __jsx(VersionFilter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 69\n  },\n  __self: this\n}), __jsx(StatusFilter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 70\n  },\n  __self: this\n}));\n\nfunction Issues({\n  resourceId\n}) {\n  const {\n    0: length,\n    1: setLength\n  } = useState(0);\n  const {\n    loading,\n    error,\n    data,\n    fetchMore\n  } = useQuery(GET_ISSUES, {\n    variables: {\n      resourceId,\n      maxResults: ROWS_PER_PAGE\n    }\n  });\n  useEffect(() => {\n    if (data && data.issues && data.issues.issues.length) {\n      setLength(data.issues.issues.length);\n    }\n  }, [data]);\n  return __jsx(React.Fragment, null, __jsx(IssueTable, {\n    loading: loading,\n    error: error,\n    issues: data && data.issues,\n    rowsPerPage: ROWS_PER_PAGE + length,\n    startAt: length,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), data && data.issues && data.issues.total > length && __jsx(LoadButton, {\n    fetchMore: fetchMore,\n    startAt: length,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }));\n}\n\nfunction Absences({\n  id\n}) {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_ABSENCES, {\n    variables: {\n      id\n    }\n  });\n  if (error) return __jsx(EmptyState, {\n    name: error.name,\n    message: error.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  });\n  if (loading || !data) return __jsx(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  });\n  return __jsx(React.Fragment, null, data.absences.map(({\n    date\n  }) => __jsx(Status, {\n    key: date,\n    text: date,\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })));\n}\n\nfunction Resource({\n  navigationViewController,\n  resourceId\n}) {\n  useEffect(() => {\n    navigationViewController.setView(projectHomeView.id);\n  }, [navigationViewController]);\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, __jsx(PageHeader, {\n    bottomBar: barContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, __jsx(Nameplate, {\n    id: resourceId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })), __jsx(Issues, {\n    resourceId: resourceId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), __jsx(Absences, {\n    id: resourceId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }));\n}\n\nIssues.propTypes = {\n  resourceId: PropTypes.string.isRequired\n};\nAbsences.propTypes = {\n  id: PropTypes.string.isRequired\n};\nResource.propTypes = {\n  navigationViewController: PropTypes.objectOf(PropTypes.arrayOf).isRequired,\n  match: PropTypes.objectOf(PropTypes.arrayOf).isRequired\n};\nexport default withNavigationViewController(Resource);","map":{"version":3,"sources":["/home/davy/planning-app/client/src/pages/resource.js"],"names":["React","useState","useEffect","gql","useQuery","PropTypes","withNavigationViewController","EmptyState","PageHeader","TextField","Status","projectHomeView","Loading","Layout","ProjectFilter","VersionFilter","StatusFilter","IssueTable","LoadButton","Nameplate","ISSUE_ROW_DATA","ISSUE_PAGINATION","ROWS_PER_PAGE","GET_ISSUES","GET_ABSENCES","barContent","display","flexBasis","marginRight","Issues","resourceId","length","setLength","loading","error","data","fetchMore","variables","maxResults","issues","total","Absences","id","name","message","absences","map","date","Resource","navigationViewController","setView","propTypes","string","isRequired","objectOf","arrayOf","match"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { gql, useQuery } from '@apollo/client'\nimport PropTypes from 'prop-types'\nimport { withNavigationViewController } from '@atlaskit/navigation-next'\nimport EmptyState from '@atlaskit/empty-state'\nimport PageHeader from '@atlaskit/page-header'\nimport TextField from '@atlaskit/textfield'\nimport { Status } from '@atlaskit/status'\nimport {\n  projectHomeView,\n  Loading,\n  Layout,\n  ProjectFilter,\n  VersionFilter,\n  StatusFilter,\n  IssueTable,\n  LoadButton,\n  Nameplate,\n} from '../components'\nimport { ISSUE_ROW_DATA, ISSUE_PAGINATION } from './issues'\n\nconst ROWS_PER_PAGE = 50\n\nconst GET_ISSUES = gql`\n  query GetIssues(\n    $projectId: String\n    $versionId: String\n    $statusId: String\n    $resourceId: String\n    $startAt: Int\n    $maxResults: Int\n  ) {\n    projectId @client @export(as: \"projectId\")\n    versionId @client @export(as: \"versionId\")\n    statusId @client @export(as: \"statusId\")\n    issues(\n      projectId: $projectId\n      versionId: $versionId\n      statusId: $statusId\n      resourceId: $resourceId\n      startAt: $startAt\n      maxResults: $maxResults\n    ) {\n      ...IssuePagination\n      issues {\n        ...IssueRow\n      }\n    }\n  }\n  ${ISSUE_PAGINATION}\n  ${ISSUE_ROW_DATA}\n`\n\nexport const GET_ABSENCES = gql`\n  query getAbsences($id: ID!) {\n    absences(id: $id) {\n      key\n      date\n    }\n  }\n`\n\nconst barContent = (\n  <div style={{ display: 'flex' }}>\n    <div style={{ flexBasis: 150, marginRight: 8 }}>\n      <TextField isCompact placeholder=\"Filter\" aria-label=\"Filter\" />\n    </div>\n    <ProjectFilter />\n    <VersionFilter />\n    <StatusFilter />\n  </div>\n)\n\nfunction Issues({ resourceId }) {\n  const [length, setLength] = useState(0)\n  const {\n    loading, error, data, fetchMore,\n  } = useQuery(GET_ISSUES, {\n    variables: { resourceId, maxResults: ROWS_PER_PAGE },\n  })\n\n  useEffect(() => {\n    if (data && data.issues && data.issues.issues.length) {\n      setLength(data.issues.issues.length)\n    }\n  }, [data])\n\n  return (\n    <>\n      <IssueTable\n        loading={loading}\n        error={error}\n        issues={data && data.issues}\n        rowsPerPage={ROWS_PER_PAGE + length}\n        startAt={length}\n      />\n      {data && data.issues && data.issues.total > length && (\n        <LoadButton fetchMore={fetchMore} startAt={length} />\n      )}\n    </>\n  )\n}\n\nfunction Absences({ id }) {\n  const { loading, error, data } = useQuery(GET_ABSENCES, { variables: { id } })\n\n  if (error) return <EmptyState name={error.name} message={error.message} />\n  if (loading || !data) return <Loading />\n\n  return (\n    <>\n      {data.absences.map(({ date }) => (\n        <Status key={date} text={date} color=\"blue\" />\n      ))}\n    </>\n  )\n}\n\nfunction Resource({ navigationViewController, resourceId }) {\n  useEffect(() => {\n    navigationViewController.setView(projectHomeView.id)\n  }, [navigationViewController])\n\n  return (\n    <Layout>\n      <PageHeader bottomBar={barContent}>\n        <Nameplate id={resourceId} />\n      </PageHeader>\n      <Issues resourceId={resourceId} />\n      <Absences id={resourceId} />\n    </Layout>\n  )\n}\n\nIssues.propTypes = {\n  resourceId: PropTypes.string.isRequired,\n}\n\nAbsences.propTypes = {\n  id: PropTypes.string.isRequired,\n}\n\nResource.propTypes = {\n  navigationViewController: PropTypes.objectOf(PropTypes.arrayOf).isRequired,\n  match: PropTypes.objectOf(PropTypes.arrayOf).isRequired,\n}\n\nexport default withNavigationViewController(Resource)\n"]},"metadata":{},"sourceType":"module"}