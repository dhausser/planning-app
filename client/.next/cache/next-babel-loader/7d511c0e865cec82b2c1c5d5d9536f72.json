{"ast":null,"code":"import { gql } from '@apollo/client';\nexport const typeDefs = gql`\n  extend type Query {\n    isLoggedIn: Boolean!\n    filter: Filter\n  }\n\n  type Filter {\n    project: Project\n    status: Status\n    version: Version\n    team: Team\n  }\n\n  extend type Mutation {\n    toggleFilter(id: ID, name: String, type: String): Int\n  }\n`;\nconst GET_FILTER = gql`\n  query GetFilter {\n    filter @client {\n      project {\n        id\n        name\n      }\n      version {\n        id\n        name\n      }\n      team {\n        id\n        name\n      }\n      status {\n        id\n        name\n      }\n    }\n  }\n`;\nexport const resolvers = {\n  // Query: {\n  //   isLoggedIn: (_root, args, { cache }, info) => {\n  //     console.log(cache);\n  //     return !!localStorage.getItem(\"token\");\n  //   }\n  // },\n  Mutation: {\n    toggleFilter: (_root, {\n      id = null,\n      name = null,\n      type = null\n    }, {\n      cache\n    }) => {\n      const {\n        filter\n      } = cache.readQuery({\n        query: GET_FILTER\n      });\n      filter[type.toLowerCase()] = {\n        id,\n        name,\n        __typename: type\n      };\n      cache.writeData({\n        data: {\n          filter,\n          __typename: 'Filter'\n        }\n      });\n      localStorage.setItem('filter', JSON.stringify(filter));\n    }\n  }\n};","map":{"version":3,"sources":["/home/davy/planning-app/client/src/schema.js"],"names":["gql","typeDefs","GET_FILTER","resolvers","Mutation","toggleFilter","_root","id","name","type","cache","filter","readQuery","query","toLowerCase","__typename","writeData","data","localStorage","setItem","JSON","stringify"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA,OAAO,MAAMC,QAAQ,GAAGD,GAAI;;;;;;;;;;;;;;;;CAArB;AAkBP,MAAME,UAAU,GAAGF,GAAI;;;;;;;;;;;;;;;;;;;;;CAAvB;AAuBA,OAAO,MAAMG,SAAS,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE,CACZC,KADY,EAEZ;AAAEC,MAAAA,EAAE,GAAG,IAAP;AAAaC,MAAAA,IAAI,GAAG,IAApB;AAA0BC,MAAAA,IAAI,GAAG;AAAjC,KAFY,EAGZ;AAAEC,MAAAA;AAAF,KAHY,KAIT;AACH,YAAM;AAAEC,QAAAA;AAAF,UAAaD,KAAK,CAACE,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAnB;AACAS,MAAAA,MAAM,CAACF,IAAI,CAACK,WAAL,EAAD,CAAN,GAA6B;AAAEP,QAAAA,EAAF;AAAMC,QAAAA,IAAN;AAAYO,QAAAA,UAAU,EAAEN;AAAxB,OAA7B;AACAC,MAAAA,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,IAAI,EAAE;AAAEN,UAAAA,MAAF;AAAUI,UAAAA,UAAU,EAAE;AAAtB;AAAR,OAAhB;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BC,IAAI,CAACC,SAAL,CAAeV,MAAf,CAA/B;AACD;AAVO;AAPa,CAAlB","sourcesContent":["import { gql } from '@apollo/client'\n\nexport const typeDefs = gql`\n  extend type Query {\n    isLoggedIn: Boolean!\n    filter: Filter\n  }\n\n  type Filter {\n    project: Project\n    status: Status\n    version: Version\n    team: Team\n  }\n\n  extend type Mutation {\n    toggleFilter(id: ID, name: String, type: String): Int\n  }\n`\n\nconst GET_FILTER = gql`\n  query GetFilter {\n    filter @client {\n      project {\n        id\n        name\n      }\n      version {\n        id\n        name\n      }\n      team {\n        id\n        name\n      }\n      status {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const resolvers = {\n  // Query: {\n  //   isLoggedIn: (_root, args, { cache }, info) => {\n  //     console.log(cache);\n  //     return !!localStorage.getItem(\"token\");\n  //   }\n  // },\n  Mutation: {\n    toggleFilter: (\n      _root,\n      { id = null, name = null, type = null },\n      { cache },\n    ) => {\n      const { filter } = cache.readQuery({ query: GET_FILTER })\n      filter[type.toLowerCase()] = { id, name, __typename: type }\n      cache.writeData({ data: { filter, __typename: 'Filter' } })\n      localStorage.setItem('filter', JSON.stringify(filter))\n    },\n  },\n}\n"]},"metadata":{},"sourceType":"module"}