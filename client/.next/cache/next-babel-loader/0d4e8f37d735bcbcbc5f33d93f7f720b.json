{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/davy/planning-app/client/src/lib/apollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport App from \"next/app\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport createApolloClient from \"../apolloClient\"; // On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\n\nlet globalApolloClient = null;\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerProps\n * @param {NextPageContext | NextAppContext} ctx\n */\n\nexport const initOnContext = ctx => {\n  const inAppContext = Boolean(ctx.ctx); // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n\n  if (true) {\n    if (inAppContext) {\n      console.warn(\"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" + \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\");\n    }\n  } // Initialize ApolloClient if not already done\n\n\n  const apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx); // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n\n  apolloClient.toJSON = () => null; // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\n\nconst initApolloClient = (initialState, ctx) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState, ctx);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n/**\n * Creates a withApollo HOC\n * that provides the apolloContext\n * to a next.js Page or AppTree.\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\n\n\nexport const withApollo = ({\n  ssr = false\n} = {}) => PageComponent => {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    let client;\n\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const inAppContext = Boolean(ctx.ctx);\n      const {\n        apolloClient\n      } = initOnContext(ctx); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (false) {\n        const {\n          AppTree\n        } = ctx; // When redirecting, the response is finished.\n        // No point in continuing to render\n\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if dataFromTree is enabled\n\n\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const {\n              getDataFromTree\n            } = await import(\"@apollo/react-ssr\"); // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n\n            let props;\n\n            if (inAppContext) {\n              props = _objectSpread({}, pageProps, {\n                apolloClient\n              });\n            } else {\n              props = {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient\n                })\n              };\n            } // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n\n\n            await getDataFromTree(__jsx(AppTree, _extends({}, props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 150\n              },\n              __self: this\n            })));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      }\n\n      return _objectSpread({}, pageProps, {\n        // Extract query data from the Apollo store\n        apolloState: apolloClient.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        // gets JSON.stringified it will remove itself.\n        apolloClient: ctx.apolloClient\n      });\n    };\n  }\n\n  return WithApollo;\n};","map":{"version":3,"sources":["/home/davy/planning-app/client/src/lib/apollo.js"],"names":["React","App","Head","ApolloProvider","createApolloClient","globalApolloClient","initOnContext","ctx","inAppContext","Boolean","console","warn","apolloClient","initApolloClient","apolloState","toJSON","initialState","withApollo","ssr","PageComponent","WithApollo","pageProps","client","undefined","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","rewind","cache","extract"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport App from \"next/app\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport createApolloClient from \"../apolloClient\";\n\n// On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\nlet globalApolloClient = null;\n\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerProps\n * @param {NextPageContext | NextAppContext} ctx\n */\nexport const initOnContext = ctx => {\n  const inAppContext = Boolean(ctx.ctx);\n\n  // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n  if (process.env.NODE_ENV === \"development\") {\n    if (inAppContext) {\n      console.warn(\n        \"Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n\" +\n          \"Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n\"\n      );\n    }\n  }\n\n  // Initialize ApolloClient if not already done\n  const apolloClient =\n    ctx.apolloClient ||\n    initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n  apolloClient.toJSON = () => null;\n\n  // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n  ctx.apolloClient = apolloClient;\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\nconst initApolloClient = (initialState, ctx) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === \"undefined\") {\n    return createApolloClient(initialState, ctx);\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n\n/**\n * Creates a withApollo HOC\n * that provides the apolloContext\n * to a next.js Page or AppTree.\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\nexport const withApollo = ({ ssr = false } = {}) => PageComponent => {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    let client;\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== \"production\") {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const inAppContext = Boolean(ctx.ctx);\n      const { apolloClient } = initOnContext(ctx);\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === \"undefined\") {\n        const { AppTree } = ctx;\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if dataFromTree is enabled\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n\n            // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n            let props;\n            if (inAppContext) {\n              props = { ...pageProps, apolloClient };\n            } else {\n              props = { pageProps: { ...pageProps, apolloClient } };\n            }\n\n            // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n            await getDataFromTree(<AppTree {...props} />);\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind();\n        }\n      }\n\n      return {\n        ...pageProps,\n        // Extract query data from the Apollo store\n        apolloState: apolloClient.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        // gets JSON.stringified it will remove itself.\n        apolloClient: ctx.apolloClient\n      };\n    };\n  }\n\n  return WithApollo;\n};\n"]},"metadata":{},"sourceType":"module"}