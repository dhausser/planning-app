{"ast":null,"code":"var _jsxFileName = \"/home/davy/planning-app/client/src/components/BarChart.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Chart from 'chart.js';\nconst transparency = '0.3';\nconst colors = [{\n  key: 'B200 - Coogee',\n  value: `rgba(38, 132, 255, ${transparency})`\n}, {\n  key: 'G200 - Green tea',\n  value: `rgba(87, 217, 163, ${transparency})`\n}, {\n  key: 'T200 - Mermaid net',\n  value: `rgba(0, 199, 229, ${transparency})`\n}, {\n  key: 'P200 - Pastelli',\n  value: `rgba(135, 119, 217, ${transparency})`\n}];\n\nfunction updateChartOptions(results, total) {\n  return {\n    title: {\n      display: true,\n      text: `Displaying ${results} of ${total} issues`\n    },\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    }\n  };\n}\n\nfunction updateChartData(labels, values) {\n  return {\n    labels,\n    datasets: [{\n      label: 'Sum of issues',\n      data: values,\n      backgroundColor: colors[0].value\n    }]\n  };\n}\n\nexport default function BarChart({\n  labels,\n  values,\n  maxResults,\n  total\n}) {\n  const {\n    0: chart,\n    1: setChart\n  } = useState(null);\n  const results = maxResults > total ? total : maxResults;\n  const ctx = 'myChart';\n  useEffect(() => {\n    if (chart) {\n      chart.options.title.text = `Displaying ${results} of ${total} issues`;\n      chart.data = updateChartData(labels, values);\n      chart.update();\n    } else {\n      setChart(new Chart(ctx, {\n        type: 'bar',\n        data: updateChartData(labels, values),\n        options: updateChartOptions(results, total)\n      }));\n    }\n  }, [chart, labels, values, results, total]);\n  return __jsx(\"canvas\", {\n    id: \"myChart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  });\n}\nBarChart.defaultProps = {\n  labels: [],\n  values: [],\n  maxResults: 0,\n  total: 0\n};\nBarChart.propTypes = {\n  labels: PropTypes.arrayOf(PropTypes.string),\n  values: PropTypes.arrayOf(PropTypes.number),\n  maxResults: PropTypes.number,\n  total: PropTypes.number\n};","map":{"version":3,"sources":["/home/davy/planning-app/client/src/components/BarChart.js"],"names":["React","useState","useEffect","PropTypes","Chart","transparency","colors","key","value","updateChartOptions","results","total","title","display","text","scales","yAxes","ticks","beginAtZero","updateChartData","labels","values","datasets","label","data","backgroundColor","BarChart","maxResults","chart","setChart","ctx","options","update","type","defaultProps","propTypes","arrayOf","string","number"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport Chart from 'chart.js'\n\nconst transparency = '0.3'\nconst colors = [\n  { key: 'B200 - Coogee', value: `rgba(38, 132, 255, ${transparency})` },\n  { key: 'G200 - Green tea', value: `rgba(87, 217, 163, ${transparency})` },\n  { key: 'T200 - Mermaid net', value: `rgba(0, 199, 229, ${transparency})` },\n  { key: 'P200 - Pastelli', value: `rgba(135, 119, 217, ${transparency})` },\n]\n\nfunction updateChartOptions(results, total) {\n  return {\n    title: {\n      display: true,\n      text: `Displaying ${results} of ${total} issues`,\n    },\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n          },\n        },\n      ],\n    },\n  }\n}\n\nfunction updateChartData(labels, values) {\n  return {\n    labels,\n    datasets: [\n      {\n        label: 'Sum of issues',\n        data: values,\n        backgroundColor: colors[0].value,\n      },\n    ],\n  }\n}\n\nexport default function BarChart({\n  labels, values, maxResults, total,\n}) {\n  const [chart, setChart] = useState(null)\n  const results = maxResults > total ? total : maxResults\n  const ctx = 'myChart'\n\n  useEffect(() => {\n    if (chart) {\n      chart.options.title.text = `Displaying ${results} of ${total} issues`\n      chart.data = updateChartData(labels, values)\n      chart.update()\n    } else {\n      setChart(\n        new Chart(ctx, {\n          type: 'bar',\n          data: updateChartData(labels, values),\n          options: updateChartOptions(results, total),\n        }),\n      )\n    }\n  }, [chart, labels, values, results, total])\n\n  return <canvas id=\"myChart\" />\n}\n\nBarChart.defaultProps = {\n  labels: [],\n  values: [],\n  maxResults: 0,\n  total: 0,\n}\n\nBarChart.propTypes = {\n  labels: PropTypes.arrayOf(PropTypes.string),\n  values: PropTypes.arrayOf(PropTypes.number),\n  maxResults: PropTypes.number,\n  total: PropTypes.number,\n}\n"]},"metadata":{},"sourceType":"module"}