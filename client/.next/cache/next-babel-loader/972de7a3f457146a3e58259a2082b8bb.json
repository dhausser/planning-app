{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/davy/planning-app/client/src/pages/resources.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n  resources {\\n    key\\n    name\\n    team\\n  }\\n}\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery, gql } from '@apollo/client';\nimport Layout from '../components/MyLayout';\nconst RESOURCES = gql(_templateObject());\nexport default (() => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(RESOURCES);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Loading\");\n\n  if (error) {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Error:\", ' ', error.message);\n  }\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Resources\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, data.resources.map(({\n    key,\n    name,\n    team\n  }) => __jsx(\"li\", {\n    key: key,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"\".concat(name, \" - \").concat(team)))));\n});","map":{"version":3,"sources":["/home/davy/planning-app/client/src/pages/resources.js"],"names":["useQuery","gql","Layout","RESOURCES","loading","error","data","message","resources","map","key","name","team"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,MAAMC,SAAS,GAAGF,GAAH,mBAAf;AAUA,gBAAe,MAAM;AACnB,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BN,QAAQ,CAACG,SAAD,CAAzC;AACA,MAAIC,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;;AACb,MAAIC,KAAJ,EAAW;AACT,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEG,GAFH,EAGGA,KAAK,CAACE,OAHT,CADF;AAOD;;AACD,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,CAACE,SAAL,CAAeC,GAAf,CAAmB,CAAC;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,IAAP;AAAaC,IAAAA;AAAb,GAAD,KAAyB;AAAI,IAAA,GAAG,EAAEF,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAkBC,IAAlB,gBAA4BC,IAA5B,EAA5C,CADH,CAFF,CADF;AAQD,CApBD","sourcesContent":["import { useQuery, gql } from '@apollo/client'\nimport Layout from '../components/MyLayout'\n\nconst RESOURCES = gql`\n{\n  resources {\n    key\n    name\n    team\n  }\n}\n`\n\nexport default () => {\n  const { loading, error, data } = useQuery(RESOURCES)\n  if (loading) return <p>Loading</p>\n  if (error) {\n    return (\n      <p>\n        Error:\n        {' '}\n        {error.message}\n      </p>\n    )\n  }\n  return (\n    <Layout>\n      <h2>Resources</h2>\n      <ul>\n        {data.resources.map(({ key, name, team }) => <li key={key}>{`${name} - ${team}`}</li>)}\n      </ul>\n    </Layout>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}