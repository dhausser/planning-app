{"ast":null,"code":"var _jsxFileName = \"/home/davy/planning-app/client/src/components/Filters.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { gql, useApolloClient, useQuery } from '@apollo/client';\nimport Select from '@atlaskit/select';\nexport const TOGGLE_FILTER = gql`\n  mutation toggleFilter($id: ID, $name: String, $type: String) {\n    toggleFilter(id: $id, name: $name, type: $type) @client\n  }\n`;\nconst GET_PROJECTS = gql`\n  query GetProjects {\n    projects {\n      id\n      name\n    }\n  }\n`;\nconst GET_VERSIONS = gql`\n  query GetVersions($id: ID!, $startAt: Int, $maxResults: Int) {\n    versions(id: $id, startAt: $startAt, maxResults: $maxResults) {\n      id\n      name\n    }\n  }\n`;\nconst GET_TEAMS = gql`\n  query GetTeams {\n    teams {\n      id\n    }\n  }\n`;\nconst GET_PROJECT_FILTER = gql`\n  {\n    projectId @client\n  }\n`;\nconst GET_VERSION_FILTER = gql`\n  {\n    versionId @client\n  }\n`;\nconst GET_STATUS_FILTER = gql`\n  {\n    statusId @client\n  }\n`;\nconst GET_TEAM_FILTER = gql`\n  {\n    teamId @client\n  }\n`;\nexport function ProjectFilter() {\n  const client = useApolloClient();\n  const {\n    data: projectData\n  } = useQuery(GET_PROJECT_FILTER);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_PROJECTS);\n  if (loading) return __jsx(Select, {\n    spacing: \"compact\",\n    isLoading: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  });\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, error.message);\n  let defaultValue;\n  const options = data.projects && data.projects.map(({\n    id,\n    name\n  }) => {\n    const option = {\n      value: id,\n      label: name\n    };\n    if (id === projectData && projectData.projectId) defaultValue = option;\n    return option;\n  });\n  return __jsx(\"div\", {\n    style: {\n      flexBasis: 130,\n      marginRight: 8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, __jsx(Select, {\n    spacing: \"compact\",\n    defaultValue: defaultValue,\n    isLoading: loading,\n    options: options,\n    placeholder: \"Project\",\n    onChange: e => {\n      if (e) {\n        client.writeData({\n          data: {\n            projectId: e.value\n          }\n        });\n        localStorage.setItem('projectId', e.value);\n      } else {\n        client.writeData({\n          data: {\n            projectId: null\n          }\n        });\n        localStorage.removeItem('projectId');\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }));\n}\nexport function VersionFilter() {\n  const client = useApolloClient();\n  const {\n    data: projectData\n  } = useQuery(GET_PROJECT_FILTER);\n  const {\n    data: versionData\n  } = useQuery(GET_VERSION_FILTER);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_VERSIONS, {\n    variables: {\n      id: projectData && projectData.projectId\n    }\n  });\n  if (loading) return __jsx(Select, {\n    spacing: \"compact\",\n    isLoading: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  });\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, error.message);\n  let defaultValue;\n  const options = data.versions && data.versions.map(({\n    id,\n    name\n  }) => {\n    const option = {\n      value: id,\n      label: name\n    };\n    if (id === versionData && versionData.versionId) defaultValue = option;\n    return option;\n  });\n  return __jsx(\"div\", {\n    style: {\n      flexBasis: 130,\n      marginRight: 8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, __jsx(Select, {\n    spacing: \"compact\",\n    isClearable: true,\n    defaultValue: defaultValue,\n    isLoading: loading,\n    options: options,\n    placeholder: \"Version\",\n    onChange: e => {\n      if (e) {\n        client.writeData({\n          data: {\n            versionId: e.value\n          }\n        });\n        localStorage.setItem('versionId', e.value);\n      } else {\n        client.writeData({\n          data: {\n            versionId: null\n          }\n        });\n        localStorage.removeItem('versionId');\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }));\n}\nexport function StatusFilter() {\n  const client = useApolloClient();\n  const {\n    data: statusData\n  } = useQuery(GET_STATUS_FILTER);\n  const options = [{\n    value: '2',\n    label: 'Open'\n  }, {\n    value: '4',\n    label: 'In Progress'\n  }, {\n    value: '3',\n    label: 'Closed'\n  }];\n  const defaultValue = options.find(({\n    value\n  }) => value === statusData && statusData.statusId);\n  return __jsx(\"div\", {\n    style: {\n      flexBasis: 130,\n      marginRight: 8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, __jsx(Select, {\n    spacing: \"compact\",\n    isClearable: true,\n    defaultValue: defaultValue,\n    options: options,\n    placeholder: \"Status\",\n    onChange: e => {\n      if (e) {\n        client.writeData({\n          data: {\n            statusId: e.value\n          }\n        });\n        localStorage.setItem('statusId', e.value);\n      } else {\n        client.writeData({\n          data: {\n            statusId: null\n          }\n        });\n        localStorage.removeItem('statusId');\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }));\n}\nexport function TeamFilter() {\n  const client = useApolloClient();\n  const {\n    data: teamData\n  } = useQuery(GET_TEAM_FILTER);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_TEAMS);\n  if (loading) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  });\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, error.message);\n  let defaultValue;\n  const options = data.teams && data.teams.map(({\n    id\n  }) => {\n    const option = {\n      value: id,\n      label: id\n    };\n    if (id === teamData && teamData.teamId) defaultValue = option;\n    return option;\n  });\n  return __jsx(\"div\", {\n    style: {\n      flexBasis: 130,\n      marginRight: 8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, __jsx(Select, {\n    spacing: \"compact\",\n    isClearable: true,\n    defaultValue: defaultValue,\n    isLoading: loading,\n    options: options,\n    placeholder: \"Team\",\n    onChange: e => {\n      if (e) {\n        client.writeData({\n          data: {\n            teamId: e.value\n          }\n        });\n        localStorage.setItem('teamId', e.value);\n      } else {\n        client.writeData({\n          data: {\n            teamId: null\n          }\n        });\n        localStorage.removeItem('teamId');\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/davy/planning-app/client/src/components/Filters.js"],"names":["React","gql","useApolloClient","useQuery","Select","TOGGLE_FILTER","GET_PROJECTS","GET_VERSIONS","GET_TEAMS","GET_PROJECT_FILTER","GET_VERSION_FILTER","GET_STATUS_FILTER","GET_TEAM_FILTER","ProjectFilter","client","data","projectData","loading","error","message","defaultValue","options","projects","map","id","name","option","value","label","projectId","flexBasis","marginRight","e","writeData","localStorage","setItem","removeItem","VersionFilter","versionData","variables","versions","versionId","StatusFilter","statusData","find","statusId","TeamFilter","teamData","teams","teamId"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { gql, useApolloClient, useQuery } from '@apollo/client'\nimport Select from '@atlaskit/select'\n\nexport const TOGGLE_FILTER = gql`\n  mutation toggleFilter($id: ID, $name: String, $type: String) {\n    toggleFilter(id: $id, name: $name, type: $type) @client\n  }\n`\n\nconst GET_PROJECTS = gql`\n  query GetProjects {\n    projects {\n      id\n      name\n    }\n  }\n`\n\nconst GET_VERSIONS = gql`\n  query GetVersions($id: ID!, $startAt: Int, $maxResults: Int) {\n    versions(id: $id, startAt: $startAt, maxResults: $maxResults) {\n      id\n      name\n    }\n  }\n`\n\nconst GET_TEAMS = gql`\n  query GetTeams {\n    teams {\n      id\n    }\n  }\n`\n\nconst GET_PROJECT_FILTER = gql`\n  {\n    projectId @client\n  }\n`\n\nconst GET_VERSION_FILTER = gql`\n  {\n    versionId @client\n  }\n`\n\nconst GET_STATUS_FILTER = gql`\n  {\n    statusId @client\n  }\n`\n\nconst GET_TEAM_FILTER = gql`\n  {\n    teamId @client\n  }\n`\n\nexport function ProjectFilter() {\n  const client = useApolloClient()\n  const { data: projectData } = useQuery(GET_PROJECT_FILTER)\n  const { loading, error, data } = useQuery(GET_PROJECTS)\n\n  if (loading) return <Select spacing=\"compact\" isLoading />\n  if (error) return <p>{error.message}</p>\n\n  let defaultValue\n  const options = data.projects\n    && data.projects.map(({ id, name }) => {\n      const option = { value: id, label: name }\n      if (id === projectData && projectData.projectId) defaultValue = option\n      return option\n    })\n\n  return (\n    <div style={{ flexBasis: 130, marginRight: 8 }}>\n      <Select\n        spacing=\"compact\"\n        defaultValue={defaultValue}\n        isLoading={loading}\n        options={options}\n        placeholder=\"Project\"\n        onChange={(e) => {\n          if (e) {\n            client.writeData({ data: { projectId: e.value } })\n            localStorage.setItem('projectId', e.value)\n          } else {\n            client.writeData({ data: { projectId: null } })\n            localStorage.removeItem('projectId')\n          }\n        }}\n      />\n    </div>\n  )\n}\n\nexport function VersionFilter() {\n  const client = useApolloClient()\n  const { data: projectData } = useQuery(GET_PROJECT_FILTER)\n  const { data: versionData } = useQuery(GET_VERSION_FILTER)\n  const { loading, error, data } = useQuery(GET_VERSIONS, {\n    variables: { id: projectData && projectData.projectId },\n  })\n\n  if (loading) return <Select spacing=\"compact\" isLoading />\n  if (error) return <p>{error.message}</p>\n\n  let defaultValue\n  const options = data.versions\n    && data.versions.map(({ id, name }) => {\n      const option = { value: id, label: name }\n      if (id === versionData && versionData.versionId) defaultValue = option\n      return option\n    })\n\n  return (\n    <div style={{ flexBasis: 130, marginRight: 8 }}>\n      <Select\n        spacing=\"compact\"\n        isClearable\n        defaultValue={defaultValue}\n        isLoading={loading}\n        options={options}\n        placeholder=\"Version\"\n        onChange={(e) => {\n          if (e) {\n            client.writeData({ data: { versionId: e.value } })\n            localStorage.setItem('versionId', e.value)\n          } else {\n            client.writeData({ data: { versionId: null } })\n            localStorage.removeItem('versionId')\n          }\n        }}\n      />\n    </div>\n  )\n}\n\nexport function StatusFilter() {\n  const client = useApolloClient()\n  const { data: statusData } = useQuery(GET_STATUS_FILTER)\n\n  const options = [\n    { value: '2', label: 'Open' },\n    { value: '4', label: 'In Progress' },\n    { value: '3', label: 'Closed' },\n  ]\n  const defaultValue = options.find(\n    ({ value }) => value === statusData && statusData.statusId,\n  )\n\n  return (\n    <div style={{ flexBasis: 130, marginRight: 8 }}>\n      <Select\n        spacing=\"compact\"\n        isClearable\n        defaultValue={defaultValue}\n        options={options}\n        placeholder=\"Status\"\n        onChange={(e) => {\n          if (e) {\n            client.writeData({ data: { statusId: e.value } })\n            localStorage.setItem('statusId', e.value)\n          } else {\n            client.writeData({ data: { statusId: null } })\n            localStorage.removeItem('statusId')\n          }\n        }}\n      />\n    </div>\n  )\n}\n\nexport function TeamFilter() {\n  const client = useApolloClient()\n  const { data: teamData } = useQuery(GET_TEAM_FILTER)\n  const { loading, error, data } = useQuery(GET_TEAMS)\n\n  if (loading) return <div />\n  if (error) return <p>{error.message}</p>\n\n  let defaultValue\n  const options = data.teams\n    && data.teams.map(({ id }) => {\n      const option = { value: id, label: id }\n      if (id === teamData && teamData.teamId) defaultValue = option\n      return option\n    })\n\n  return (\n    <div style={{ flexBasis: 130, marginRight: 8 }}>\n      <Select\n        spacing=\"compact\"\n        isClearable\n        defaultValue={defaultValue}\n        isLoading={loading}\n        options={options}\n        placeholder=\"Team\"\n        onChange={(e) => {\n          if (e) {\n            client.writeData({ data: { teamId: e.value } })\n            localStorage.setItem('teamId', e.value)\n          } else {\n            client.writeData({ data: { teamId: null } })\n            localStorage.removeItem('teamId')\n          }\n        }}\n      />\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}