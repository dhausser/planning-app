{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/davy/planning-app/client/src/pages/issues.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  query GetIssues(maxResults: Int) {\\n    issues(maxResults: $maxResults) {\\n      ...IssuePagination\\n      issues {\\n        ...IssueRow\\n      }\\n    }\\n  }\\n  \", \"\\n  \", \"\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  fragment IssuePagination on IssueConnection {\\n    startAt\\n    maxResults\\n    total\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  fragment IssueRow on Issue {\\n    id\\n    key\\n    fields {\\n      summary\\n      issuetype {\\n        id\\n        name\\n      }\\n      priority {\\n        id\\n        name\\n      }\\n      status {\\n        name\\n        statusCategory {\\n          id\\n        }\\n      }\\n      fixVersions {\\n        id\\n        name\\n      }\\n      assignee {\\n        key\\n        displayName\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery, gql } from '@apollo/client';\nimport Layout from '../components/MyLayout';\nconst ROWS_PER_PAGE = 5;\nexport const ISSUE_ROW_DATA = gql(_templateObject());\nexport const ISSUE_PAGINATION = gql(_templateObject2());\nconst GET_ISSUES = gql(_templateObject3(), ISSUE_PAGINATION, ISSUE_ROW_DATA);\nexport default (() => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_ISSUES, {\n    variables: {\n      maxResults: ROWS_PER_PAGE\n    }\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Loading\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, error.message);\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Issues\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, data.issues.map(({\n    key\n  }) => __jsx(\"li\", {\n    key: key,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, key))));\n});","map":{"version":3,"sources":["/home/davy/planning-app/client/src/pages/issues.js"],"names":["useQuery","gql","Layout","ROWS_PER_PAGE","ISSUE_ROW_DATA","ISSUE_PAGINATION","GET_ISSUES","loading","error","data","variables","maxResults","message","issues","map","key"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,MAAMC,aAAa,GAAG,CAAtB;AAEA,OAAO,MAAMC,cAAc,GAAGH,GAAH,mBAApB;AAgCP,OAAO,MAAMI,gBAAgB,GAAGJ,GAAH,oBAAtB;AAQP,MAAMK,UAAU,GAAGL,GAAH,qBASZI,gBATY,EAUZD,cAVY,CAAhB;AAaA,gBAAe,MAAM;AACnB,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACM,UAAD,EAAa;AACpDI,IAAAA,SAAS,EAAE;AAAEC,MAAAA,UAAU,EAAER;AAAd;AADyC,GAAb,CAAzC;AAGA,MAAII,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAK,CAACI,OAAV,CAAP;AACX,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IAAI,CAACI,MAAL,CAAYC,GAAZ,CAAgB,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAa;AAAI,IAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAeA,GAAf,CAA7B,CADH,CAFF,CADF;AAQD,CAdD","sourcesContent":["import { useQuery, gql } from '@apollo/client'\nimport Layout from '../components/MyLayout'\n\nconst ROWS_PER_PAGE = 5\n\nexport const ISSUE_ROW_DATA = gql`\n  fragment IssueRow on Issue {\n    id\n    key\n    fields {\n      summary\n      issuetype {\n        id\n        name\n      }\n      priority {\n        id\n        name\n      }\n      status {\n        name\n        statusCategory {\n          id\n        }\n      }\n      fixVersions {\n        id\n        name\n      }\n      assignee {\n        key\n        displayName\n      }\n    }\n  }\n`\n\nexport const ISSUE_PAGINATION = gql`\n  fragment IssuePagination on IssueConnection {\n    startAt\n    maxResults\n    total\n  }\n`\n\nconst GET_ISSUES = gql`\n  query GetIssues(maxResults: Int) {\n    issues(maxResults: $maxResults) {\n      ...IssuePagination\n      issues {\n        ...IssueRow\n      }\n    }\n  }\n  ${ISSUE_PAGINATION}\n  ${ISSUE_ROW_DATA}\n`\n\nexport default () => {\n  const { loading, error, data } = useQuery(GET_ISSUES, {\n    variables: { maxResults: ROWS_PER_PAGE },\n  })\n  if (loading) return <p>Loading</p>\n  if (error) return <p>{error.message}</p>\n  return (\n    <Layout>\n      <h1>Issues</h1>\n      <ul>\n        {data.issues.map(({ key }) => <li key={key}>{key}</li>)}\n      </ul>\n    </Layout>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}