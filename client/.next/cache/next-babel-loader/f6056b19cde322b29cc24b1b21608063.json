{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/davy/planning-app/client/src/pages/issues.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query GetIssues {\\n    issues {\\n      issues {\\n        key\\n        description\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery, gql } from '@apollo/client';\nimport Layout from '../components/MyLayout';\nconst GET_ISSUES = gql(_templateObject());\nexport default (() => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_ISSUES);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Loading\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, error.message);\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Issues\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, data && data.issues && data.issues.issues.map(({\n    key\n  }) => __jsx(\"li\", {\n    key: key,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, key))));\n});","map":{"version":3,"sources":["/home/davy/planning-app/client/src/pages/issues.js"],"names":["useQuery","gql","Layout","GET_ISSUES","loading","error","data","message","issues","map","key"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,MAAMC,UAAU,GAAGF,GAAH,mBAAhB;AAWA,gBAAe,MAAM;AACnB,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BN,QAAQ,CAACG,UAAD,CAAzC;AACA,MAAIC,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAK,CAACE,OAAV,CAAP;AACX,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,IAAIA,IAAI,CAACE,MAAb,IAAuBF,IAAI,CAACE,MAAL,CAAYA,MAAZ,CAAmBC,GAAnB,CAAuB,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAa;AAAI,IAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAeA,GAAf,CAApC,CAD1B,CAFF,CADF;AAQD,CAZD","sourcesContent":["import { useQuery, gql } from '@apollo/client'\nimport Layout from '../components/MyLayout'\n\nconst GET_ISSUES = gql`\n  query GetIssues {\n    issues {\n      issues {\n        key\n        description\n      }\n    }\n  }\n`\n\nexport default () => {\n  const { loading, error, data } = useQuery(GET_ISSUES)\n  if (loading) return <p>Loading</p>\n  if (error) return <p>{error.message}</p>\n  return (\n    <Layout>\n      <h1>Issues</h1>\n      <ul>\n        {data && data.issues && data.issues.issues.map(({ key }) => <li key={key}>{key}</li>)}\n      </ul>\n    </Layout>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}