{"ast":null,"code":"var _jsxFileName = \"/home/davy/planning-app/client/src/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport App from 'next/app';\nimport { withApollo } from '../lib/apollo'; // import { NavigationProvider } from \"@atlaskit/navigation-next\"\n// import { ApolloProvider } from \"@apollo/client\"\n\n{\n  /* <ApolloProvider client={client}>\n  <NavigationProvider>{element}</NavigationProvider>\n  </ApolloProvider> */\n}\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return __jsx(Component, _extends({}, pageProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n\n\nMyApp.getInitialProps = async appContext => {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  const appProps = await App.getInitialProps(appContext);\n  return _objectSpread({}, appProps);\n};\n\nexport default withApollo({\n  ssr: true\n})(MyApp);","map":{"version":3,"sources":["/home/davy/planning-app/client/src/pages/_app.js"],"names":["App","withApollo","MyApp","Component","pageProps","getInitialProps","appContext","appProps","ssr"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,SAASC,UAAT,QAA2B,eAA3B,C,CAEA;AAEA;;AACA;AAAE;;;AAEoB;;AAEtB,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACvC,SAAO,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,C,CAED;AACA;AACA;AACA;;;AAEAF,KAAK,CAACG,eAAN,GAAwB,MAAOC,UAAP,IAAsB;AAC5C;AACA,QAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACK,eAAJ,CAAoBC,UAApB,CAAvB;AAEA,2BAAYC,QAAZ;AACD,CALD;;AAOA,eAAeN,UAAU,CAAC;AAAEO,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA0BN,KAA1B,CAAf","sourcesContent":["import App from 'next/app'\nimport { withApollo } from '../lib/apollo'\n\n// import { NavigationProvider } from \"@atlaskit/navigation-next\"\n\n// import { ApolloProvider } from \"@apollo/client\"\n{ /* <ApolloProvider client={client}>\n<NavigationProvider>{element}</NavigationProvider>\n</ApolloProvider> */ }\n\nfunction MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n\nMyApp.getInitialProps = async (appContext) => {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  const appProps = await App.getInitialProps(appContext)\n\n  return { ...appProps }\n}\n\nexport default withApollo({ ssr: true })(MyApp)\n"]},"metadata":{},"sourceType":"module"}